#include <iostream>

using namespace std;

typedef int bitword;
bitword A[100];

void bitsetZero(bitword* arr, int num);
int bitsetGet(const bitword* arr, int idx);
void bitsetSet(bitword* arr, int idx, int newval);
int bitsetAny(const bitword* arr, int left, int right);


void bitsetZero(bitword* arr, int num) {
    int posl;
    posl = num / 32;
    for (int i = 0; i <= posl; i++) {
        arr[i] = 0;
    }
}

int bitsetGet(const bitword* arr, int idx) {
    int x1, x2, res;
    x1 = idx / 32;
    x2 = idx % 32;
    res = 0;
    res = ((arr[x1] & (1 << x2)) != 0);
    return res;
}

void bitsetSet(bitword* arr, int idx, int newval) {
    int x1, x2;
    x1 = idx / 32;
    x2 = idx % 32;
    if (newval) {
        arr[x1] = ((arr[x1] | (1 << x2)));
    }
    else {
        arr[x1] = ((arr[x1] & ~(1 << x2)));
    }
}

int bitsetAny(const bitword* arr, int left, int right) {
    int L, R;
    L = left / 32;
    R = right / 32;
    if (L != R) {
        for (int i = (left % 32); i < 32; i++) {
            if ((arr[L] & (1 << i)) != 0) {
                return 1;
            }
        }


        for (int i = L + 1; i < R; i++) {
            if (arr[i] != 0) {
                return 1;
            }
        }


        for (int i = 0; i < (right % 32); i++) {
            if ((arr[R] & (1 << i)) != 0) {
                return 1;
            }
        }
    }


    else {
        for (int i = (left % 32); i < (right % 32); i++) {
            if ((arr[L] & (1 << i)) != 0){
                return 1;
            }
        }
    }
    return 0;
}

int main() {

    int n, m, x, y;

    cin >> n >> m;
    bitsetZero(A, n * 32);
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }
    for (int i = 0; i < m; i++) {
        cin >> x >> y;
        y = (((y / 32) + 1) * 32 - 1) - (y - 32 * (y / 32));
        bitsetSet(A, y, x);
    }
    for (int i = 0; i < n; i++) {
        cout << A[i] << " ";
    }

    return 0;
}
